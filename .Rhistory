theme_bw()+
xlab("Time")+
ylim(0,0.5)+
ylab("Perception/Expected impact")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
org143<-agentStep1 %>% filter(agentID==143)
adaptTick143= match(TRUE,org143$`adaptation-change?`)[[1]] #707
org143
adaptTick143
open136<-org188 %>% filter(`window-open?`==TRUE & step_id<=adaptTick136) %>% select(step_id)
open136<-open136[[1]]
open136
agentStep1 %>% filter(`adaptation-change?`==TRUE ) %>% select(agentID)
org143<-agentStep1 %>% filter(agentID==143)
adaptTick143= match(TRUE,org143$`adaptation-change?`)[[1]] #707
adaptTick143
org20<-agentStep1 %>% filter(agentID==20)
adaptTick143= match(TRUE,org20$`adaptation-change?`)[[1]] #707
adaptTick143
org2<-agentStep1 %>% filter(agentID==124)
org124<-agentStep1 %>% filter(agentID==124)
adaptTick143= match(TRUE,org124$`adaptation-change?`)[[1]] #707
adaptTick143
adapt<-agentStep1 %>% filter(`adaptation-change?`==TRUE )
adaptLater<-adapt %>% filter(`insufBoost?`==TRUE)
adaptLater
adapt<-agentStep1 %>% filter(`adaptation-change?`==TRUE )
adapt
adaptLater<-adapt %>% filter(`insufBoost?`==TRUE)
adaptLater
View(adapt)
ggplot(org112)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="gray70")+
geom_vline(xintercept=open112[1], color=marron,size=1.2)+
geom_vline(xintercept=open112[2], color=marron,size=1.2)+
geom_vline(xintercept=open112[3], color=marron,size=1.2)+
geom_vline(xintercept=open112[4], color=marron,size=1.2)+
geom_vline(xintercept=open112[5], color=marron,size=1.2)+
theme_bw()+
xlab("Time")+
ylim(0,0.5)+
ylab("Perception/Expected impact")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
ggplot(org112)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="gray30")+
geom_vline(xintercept=open112[1], color=marron,size=1.2)+
geom_vline(xintercept=open112[2], color=marron,size=1.2)+
geom_vline(xintercept=open112[3], color=marron,size=1.2)+
geom_vline(xintercept=open112[4], color=marron,size=1.2)+
geom_vline(xintercept=open112[5], color=marron,size=1.2)+
theme_bw()+
xlab("Time")+
ylim(0,0.5)+
ylab("Perception/Expected impact")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
ggplot(org112)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="gray20")+
geom_vline(xintercept=open112[1], color=marron,size=1.2)+
geom_vline(xintercept=open112[2], color=marron,size=1.2)+
geom_vline(xintercept=open112[3], color=marron,size=1.2)+
geom_vline(xintercept=open112[4], color=marron,size=1.2)+
geom_vline(xintercept=open112[5], color=marron,size=1.2)+
theme_bw()+
xlab("Time")+
ylim(0,0.5)+
ylab("Perception/Expected impact")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
ggplot(org75)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="grey20")+
geom_vline(xintercept=openWindows[1], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[2], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[3], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[4], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[5], color=marron,size=1.2)+
annotate("text",x=openWindows[2]-20,y=0.40, label="Under threshold",size=6, color=darkblue)+
annotate("text",x=openWindows[4]+140,y=0.60, label="Insufficient \ncapacity \nincrease",size=6,color=darkblue)+
theme_bw()+
xlab("Time")+
ylab("Perception/Expected impact")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
ggplot(org112)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="gray20")+
geom_vline(xintercept=open112[1], color=marron,size=1.2)+
geom_vline(xintercept=open112[2], color=marron,size=1.2)+
geom_vline(xintercept=open112[3], color=marron,size=1.2)+
geom_vline(xintercept=open112[4], color=marron,size=1.2)+
geom_vline(xintercept=open112[5], color=marron,size=1.2)+
theme_bw()+
xlab("Time")+
ylim(0,0.5)+
ylab("Perception/Expected impact")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
ggplot(org75)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="grey20")+
geom_vline(xintercept=openWindows[1], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[2], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[3], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[4], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[5], color=marron,size=1.2)+
annotate("text",x=openWindows[2]-20,y=0.40, label="Under threshold",size=6, color=darkblue)+
annotate("text",x=openWindows[4]+140,y=0.60, label="Insufficient \ncapacity \nincrease",size=6,color=darkblue)+
theme_bw()+
xlab("Time")+
ylab("Perception/Expected impact")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
ggplot(org75)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="grey50")+
geom_vline(xintercept=openWindows[1], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[2], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[3], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[4], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[5], color=marron,size=1.2)+
annotate("text",x=openWindows[2]-20,y=0.40, label="Under threshold",size=6, color=darkblue)+
annotate("text",x=openWindows[4]+140,y=0.60, label="Insufficient \ncapacity \nincrease",size=6,color=darkblue)+
theme_bw()+
xlab("Time")+
ylab("Perception/Expected impact")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
ggplot(org75)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="grey50")+
geom_vline(xintercept=openWindows[1], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[2], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[3], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[4], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[5], color=marron,size=1.2)+
annotate("text",x=openWindows[2]-20,y=0.45, label="Under threshold",size=6, color=darkblue)+
annotate("text",x=openWindows[4]+140,y=0.60, label="Insufficient \ncapacity \nincrease",size=6,color=darkblue)+
theme_bw()+
xlab("Time")+
ylab("Perception/Expected impact")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
ggplot(org75)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="grey50")+
geom_vline(xintercept=openWindows[1], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[2], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[3], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[4], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[5], color=marron,size=1.2)+
annotate("text",x=openWindows[2]-20,y=0.45, label="Under threshold",size=6, color=darkblue)+
annotate("text",x=openWindows[4]+140,y=0.55, label="Insufficient \ncapacity \nincrease",size=6,color=darkblue)+
theme_bw()+
xlab("Time")+
ylab("Perception/Expected impact")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
ggplot(org75)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="grey50")+
geom_vline(xintercept=openWindows[1], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[2], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[3], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[4], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[5], color=marron,size=1.2)+
annotate("text",x=openWindows[2]-20,y=0.45, label="Under threshold",size=6, color=darkblue)+
annotate("text",x=openWindows[4]+140,y=0.57, label="Insufficient \ncapacity \nincrease",size=6,color=darkblue)+
theme_bw()+
xlab("Time")+
ylab("Perception/Expected impact")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
openWindows=org75 %>% filter(`window-open?`==TRUE) %>% select(step_id)
openWindows=openWindows[[1]]
openWindows
org75<-agentStep %>% filter(agentID==75,run_id==1,param_set_id==1)
openWindows=org75 %>% filter(`window-open?`==TRUE) %>% select(step_id)
openWindows=openWindows[[1]]
org75
org75 %>% filter(step_id==openWindows[4]) #Insufficient boost
org75 %>% filter(step_id==openWindows[5]) #Insufficient boost
rm(open195)
rm(adaptLater)
save.image("C:/Z-Work/Dissertation/Data and analysis/Dissertation ABM paper/Model data and analysis_Windows/graphs for PMRC paper.RData")
nl_param_oat(
n=1,
meanRIskThreshold = 0.4,
scanningRange = c(2,4, 5),
numWindows = c(0,6,10),
badImpact = 0.08,
impactReductionRate =0.25,
maxCopingReduction = 0.40,
adaptationCost = 6.5,
capBoost = c(2.5, 3,5),
simTicks = 1000
),
nl_param_oat(
n=1,
meanRIskThreshold = 0.4,
scanningRange = c(2,4, 5),
numWindows = c(0,6,10),
badImpact = 0.08,
impactReductionRate =0.25,
maxCopingReduction = 0.40,
adaptationCost = 6.5,
capBoost = c(2.5, 3,5),
simTicks = 1000
)
nl_param_oat(
n=10,
meanRIskThreshold = 0.4,
scanningRange = c(2,4, 5),
numWindows = c(0,6,10),
badImpact = 0.08,
impactReductionRate =0.25,
maxCopingReduction = 0.40,
adaptationCost = 6.5,
capBoost = c(2.5, 3,5),
simTicks = 1000
)
experiment <- nl_experiment(
model_file = module_file_pathWindows,
repetitions =1,
random_seed = 1,
iterations =1000,
param_values = nl_param_oat(
n=10,
meanRIskThreshold = 0.4,
scanningRange = c(2,4, 5),
numWindows = c(0,6,10),
badImpact = 0.08,
impactReductionRate =0.25,
maxCopingReduction = 0.40,
adaptationCost = 6.5,
capBoost = c(2.5, 3,5),
simTicks = 1000
),
run_measures = measures(
copingNum = "count orgs with [coping-change?]",
adaptNum = "count orgs with [adaptation-change?]",
insufBoost ="totalInsufBoost",
disasterWindows="totalDisasterWindows",
windowMissed="totalwindowMissed",
windowsOpen="totalWindowOpen",
noSolution="totalNoSolution",
utilizedWindows="totalUtilizedWindows",
NeededWidows="totalNeededWidows",
notNeeded="sufficientCap",
usedDisasterWindows= "totalUtilizedDisasterWindows"
),
# step_measures = measures(
#   sCoping="count orgs with [coping-change?]",
#   sAdapt="count orgs with [adaptation-change?]",
#   sNotFound="count orgs with [not-found?]",
#   SInsufBoost="count orgs with [insufBoost?]",
#   sWindowOpen="count orgs with [window-open?]",
#   sWindowMissed="count orgs with [window-missed?]",
#   sHappy="count orgs with [expectedImpact > riskPerceptionThreshold]"
# ),
# eval_criteria = criteria(
#   meanAdaptNum=mean(step$sAdapt),
#   stdAdaptNum=sd(step$sAdapt),
#   meanCopingNum=mean(sCoping),
#   sdCopingnum=sd(sCoping)
# ),
agents_step = list(
orgs = agent_set(
vars = c("adaptation-change?", "coping-change?", "riskPerceptionThreshold", "expectedImpact", "solEfficacy","window-open?","window-missed?","insufBoost?","originalCapacity","solution-ready?","utilizedWindow?","sufficientCap", "extremeWeatherProb","originalEfficacy","disasterProb","declarationRate","region","used-disasterWindow?"),
agents = "orgs")
),
mapping = nl_default_mapping
)
# result1<- nl_run(experiment,parallel = T)
result1000_0Window<- nl_run(experiment,parallel = T)
data2Run=nl_get_run_result(result1000_0Window)
ggplot(data2run,mapping=aes(x=factor(floor(numWindows)), y=adaptNum))+
geom_boxplot(fill=marron)+
theme_bw()+
xlab("# of windows")+
ylab("# of adapters")+
# ylim(0,197)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position = "right",axis.title = element_text(size=20), axis.text  = element_text(size=14))
data2Run=nl_get_run_result(result1000_0Window)
ggplot(data2run,mapping=aes(x=factor(floor(numWindows)), y=adaptNum))+
geom_boxplot(fill=marron)+
theme_bw()+
xlab("# of windows")+
ylab("# of adapters")+
# ylim(0,197)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position = "right",axis.title = element_text(size=20), axis.text  = element_text(size=14))
ggplot(data2Run,mapping=aes(x=factor(floor(numWindows)), y=adaptNum))+
geom_boxplot(fill=marron)+
theme_bw()+
xlab("# of windows")+
ylab("# of adapters")+
# ylim(0,197)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position = "right",axis.title = element_text(size=20), axis.text  = element_text(size=14))
ggplot(dataRun,mapping=aes(x=factor(ceiling(numWindows)), y=adaptNum))+
geom_violin()+
theme_minimal() #After some extent, the number of windows does not matter that much
ggplot(data2Run,mapping=aes(x=factor(floor(numWindows)), y=adaptNum))+
geom_boxplot(fill=marron)+
theme_bw()+
xlab("# of windows")+
ylab("# of adapters")+
# ylim(0,197)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position = "right",axis.title = element_text(size=20), axis.text  = element_text(size=14))
ggplot(data2Run,mapping=aes(x=ceiling(floor(numWindows)), y=adaptNum))+
geom_boxplot(fill=marron)+
theme_bw()+
xlab("# of windows")+
ylab("# of adapters")+
# ylim(0,197)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position = "right",axis.title = element_text(size=20), axis.text  = element_text(size=14))
ggplot(data2Run,mapping=aes(x=as.factor(floor(numWindows)), y=adaptNum))+
geom_boxplot(fill=marron)+
theme_bw()+
xlab("# of windows")+
ylab("# of adapters")+
# ylim(0,197)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position = "right",axis.title = element_text(size=20), axis.text  = element_text(size=14))
ggplot(data2Run,mapping=aes(x=as.factor(ceiling(numWindows)), y=adaptNum))+
geom_boxplot(fill=marron)+
theme_bw()+
xlab("# of windows")+
ylab("# of adapters")+
# ylim(0,197)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position = "right",axis.title = element_text(size=20), axis.text  = element_text(size=14))
data2Run$numWindows
dataRun$numWindows
nl_param_oat(
n=10,
meanRIskThreshold = 0.4,
scanningRange = c(2,4, 5),
numWindows = c(0,6,10),
badImpact = 0.08,
impactReductionRate =0.25,
maxCopingReduction = 0.40,
adaptationCost = 6.5,
capBoost = c(2.5, 3,5),
simTicks = 1000
)
30 *10
experiment <- nl_experiment(
model_file = module_file_pathWindows,
repetitions =10,
random_seed = 1:10,
iterations =1000,
param_values = nl_param_oat(
n=10,
meanRIskThreshold = 0.4,
scanningRange = c(2,4, 5),
numWindows = c(0,6,10),
badImpact = 0.08,
impactReductionRate =0.25,
maxCopingReduction = 0.40,
adaptationCost = 6.5,
capBoost = c(2.5, 3,5),
simTicks = 1000
),
run_measures = measures(
copingNum = "count orgs with [coping-change?]",
adaptNum = "count orgs with [adaptation-change?]",
insufBoost ="totalInsufBoost",
disasterWindows="totalDisasterWindows",
windowMissed="totalwindowMissed",
windowsOpen="totalWindowOpen",
noSolution="totalNoSolution",
utilizedWindows="totalUtilizedWindows",
NeededWidows="totalNeededWidows",
notNeeded="sufficientCap",
usedDisasterWindows= "totalUtilizedDisasterWindows"
),
# step_measures = measures(
#   sCoping="count orgs with [coping-change?]",
#   sAdapt="count orgs with [adaptation-change?]",
#   sNotFound="count orgs with [not-found?]",
#   SInsufBoost="count orgs with [insufBoost?]",
#   sWindowOpen="count orgs with [window-open?]",
#   sWindowMissed="count orgs with [window-missed?]",
#   sHappy="count orgs with [expectedImpact > riskPerceptionThreshold]"
# ),
# eval_criteria = criteria(
#   meanAdaptNum=mean(step$sAdapt),
#   stdAdaptNum=sd(step$sAdapt),
#   meanCopingNum=mean(sCoping),
#   sdCopingnum=sd(sCoping)
# ),
agents_step = list(
orgs = agent_set(
vars = c("adaptation-change?", "coping-change?", "riskPerceptionThreshold", "expectedImpact", "solEfficacy","window-open?","window-missed?","insufBoost?","originalCapacity","solution-ready?","utilizedWindow?","sufficientCap", "extremeWeatherProb","originalEfficacy","disasterProb","declarationRate","region","used-disasterWindow?"),
agents = "orgs")
),
mapping = nl_default_mapping
)
rm(result1000_0Window)
experiment <- nl_experiment(
model_file = module_file_pathWindows,
repetitions =10,
random_seed = 1:10,
iterations =1000,
param_values = nl_param_oat(
n=10,
meanRIskThreshold = 0.4,
scanningRange = c(2,4, 5),
numWindows = c(0,6,10),
badImpact = 0.08,
impactReductionRate =0.25,
maxCopingReduction = 0.40,
adaptationCost = 6.5,
capBoost = c(2.5, 3,5),
simTicks = 1000
),
run_measures = measures(
copingNum = "count orgs with [coping-change?]",
adaptNum = "count orgs with [adaptation-change?]",
insufBoost ="totalInsufBoost",
disasterWindows="totalDisasterWindows",
windowMissed="totalwindowMissed",
windowsOpen="totalWindowOpen",
noSolution="totalNoSolution",
utilizedWindows="totalUtilizedWindows",
NeededWidows="totalNeededWidows",
notNeeded="sufficientCap",
usedDisasterWindows= "totalUtilizedDisasterWindows"
),
# step_measures = measures(
#   sCoping="count orgs with [coping-change?]",
#   sAdapt="count orgs with [adaptation-change?]",
#   sNotFound="count orgs with [not-found?]",
#   SInsufBoost="count orgs with [insufBoost?]",
#   sWindowOpen="count orgs with [window-open?]",
#   sWindowMissed="count orgs with [window-missed?]",
#   sHappy="count orgs with [expectedImpact > riskPerceptionThreshold]"
# ),
# eval_criteria = criteria(
#   meanAdaptNum=mean(step$sAdapt),
#   stdAdaptNum=sd(step$sAdapt),
#   meanCopingNum=mean(sCoping),
#   sdCopingnum=sd(sCoping)
# ),
agents_step = list(
orgs = agent_set(
vars = c("adaptation-change?", "coping-change?", "riskPerceptionThreshold", "expectedImpact", "solEfficacy","window-open?","window-missed?","insufBoost?","originalCapacity","solution-ready?","utilizedWindow?","sufficientCap", "extremeWeatherProb","originalEfficacy","disasterProb","declarationRate","region","used-disasterWindow?"),
agents = "orgs")
),
mapping = nl_default_mapping
)
# result1<- nl_run(experiment,parallel = T)
result1000_zeroWindow<- nl_run(experiment,parallel = T)
nl_netlogo_path("C:/Program Files/NetLogo 6.0.2/app")
setwd("C:/Z-Work/Dissertation/Data and analysis/Dissertation ABM paper")
module_file_pathWindows <- "C:/Z-Work/Dissertation/Data and analysis/Dissertation ABM paper/Dissertation_ABM_0527_QuickerVersion.nlogo"
experiment <- nl_experiment(
model_file = module_file_pathWindows,
repetitions =10,
random_seed = 1:10,
iterations =1000,
param_values = nl_param_oat(
n=10,
meanRIskThreshold = 0.4,
scanningRange = c(2,4, 5),
numWindows = c(0,6,10),
badImpact = 0.08,
impactReductionRate =0.25,
maxCopingReduction = 0.40,
adaptationCost = 6.5,
capBoost = c(2.5, 3,5),
simTicks = 1000
),
run_measures = measures(
copingNum = "count orgs with [coping-change?]",
adaptNum = "count orgs with [adaptation-change?]",
insufBoost ="totalInsufBoost",
disasterWindows="totalDisasterWindows",
windowMissed="totalwindowMissed",
windowsOpen="totalWindowOpen",
noSolution="totalNoSolution",
utilizedWindows="totalUtilizedWindows",
NeededWidows="totalNeededWidows",
notNeeded="sufficientCap",
usedDisasterWindows= "totalUtilizedDisasterWindows"
),
# step_measures = measures(
#   sCoping="count orgs with [coping-change?]",
#   sAdapt="count orgs with [adaptation-change?]",
#   sNotFound="count orgs with [not-found?]",
#   SInsufBoost="count orgs with [insufBoost?]",
#   sWindowOpen="count orgs with [window-open?]",
#   sWindowMissed="count orgs with [window-missed?]",
#   sHappy="count orgs with [expectedImpact > riskPerceptionThreshold]"
# ),
# eval_criteria = criteria(
#   meanAdaptNum=mean(step$sAdapt),
#   stdAdaptNum=sd(step$sAdapt),
#   meanCopingNum=mean(sCoping),
#   sdCopingnum=sd(sCoping)
# ),
agents_step = list(
orgs = agent_set(
vars = c("adaptation-change?", "coping-change?", "riskPerceptionThreshold", "expectedImpact", "solEfficacy","window-open?","window-missed?","insufBoost?","originalCapacity","solution-ready?","utilizedWindow?","sufficientCap", "extremeWeatherProb","originalEfficacy","disasterProb","declarationRate","region","used-disasterWindow?"),
agents = "orgs")
),
mapping = nl_default_mapping
)
# cbind(experiment$mapping)  #check parameter names mapping
# result1<- nl_run(experiment,parallel = T)
result1000_zeroWindow<- nl_run(experiment,parallel = T)
rm(notSolution)
rm(smallEWprob)
rm(missed)
rm(minEW)
rm(f1)
rm(adapt)
rm(data2Run)
rm(test)
save.image("C:/Z-Work/Dissertation/Data and analysis/Dissertation ABM paper/Model data and analysis_Windows/graphs for PMRC paper.RData")
