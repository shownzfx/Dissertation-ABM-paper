E(graph)$weight=1
GroupV=which(get.vertex.attribute(graph,attrVar)==i)
temp=add_edges(graph,combn(GroupV,2), attr = list(weight=10))
layout=layout_with_fr(temp)
}
return(layout)
}
mentorNet<- mentorMentee[["mentorNet"]]
menteeNet<- mentorMentee[["menteeNet"]]
layoutJunior=addEdgeWeight(mentorNet,"junior")
layoutJunior3Cats=addEdgeWeight(mentorNet,"junior3Cats")
layoutJuniorMentee=addEdgeWeight(mentorNet,"junior")
layoutJunior3CatsMentee=addEdgeWeight(mentorNet,"junior3Cats")
"blue is other,green is senior, orange is assitant professor"
par(mfrow=c(1,2),mar=c(rep(2,4)),cex.main=1.35)
graphNet(mentorMentee,"mentorNet", "Mentor", layoutJunior3Cats, juniorColor3Cats)
graphNet(mentorMentee,"menteeNet", "Mentee", layoutJunior3CatsMentee, juniorColor3Cats)
mentorMentee<-addAttrEdge(mentorMentee)
addEdgeWeight<-function(graph, attrVar){
attrValues=get.vertex.attribute(graph,attrVar)
for (i in unique(attrValues)){
E(graph)$weight=1
GroupV=which(get.vertex.attribute(graph,attrVar)==i)
temp=add_edges(graph,combn(GroupV,2), attr = list(weight=5))
layout=layout_with_fr(temp)
}
return(layout)
}
mentorNet<- mentorMentee[["mentorNet"]]
menteeNet<- mentorMentee[["menteeNet"]]
layoutJunior=addEdgeWeight(mentorNet,"junior")
layoutJunior3Cats=addEdgeWeight(mentorNet,"junior3Cats")
layoutJuniorMentee=addEdgeWeight(mentorNet,"junior")
layoutJunior3CatsMentee=addEdgeWeight(mentorNet,"junior3Cats")
"blue is other,green is senior, orange is assitant professor"
par(mfrow=c(1,2),mar=c(rep(2,4)),cex.main=1.35)
graphNet(mentorMentee,"mentorNet", "Mentor", layoutJunior3Cats, juniorColor3Cats)
graphNet(mentorMentee,"menteeNet", "Mentee", layoutJunior3CatsMentee, juniorColor3Cats)
nl_netlogo_path("C:/Program Files/NetLogo 6.0.2/app")
library(dplyr)
library(purrr)
library(ggplot2)
library(nlexperiment)
library(tidyr)
nl_netlogo_path("C:/Program Files/NetLogo 6.0.2/app")
setwd("C:/Z-Work/Dissertation/Data and analysis/Dissertation ABM paper")
module_file_pathWindows <- "C:/Z-Work/Dissertation/Data and analysis/Dissertation ABM paper/Agave_Experiment/Dissertation_ABM_0601.nlogo"
experiment <- nl_experiment(
model_file = module_file_pathWindows,
repetitions =1,
random_seed = 1,
iterations =10,
param_values = nl_param_oat(
n=10,
meanRIskThreshold = 0.4,
scanningRange = 4,
numWindows = c(0,6,10),
badImpact = 0.08,
impactReductionRate =0.25,
maxCopingReduction = 0.40,
adaptationCost = 6.5,
capBoost = c(1, 2.5,4),
simTicks = 1000,
officeRole =0,
minNeighbor=c(1,2,4)
),
run_measures = measures(
copingNum = "count orgs with [coping-change?]",
adaptNum = "count orgs with [adaptation-change?]",
insufBoost ="totalInsufBoost",
disasterWindows="totalDisasterWindows",
windowMissed="totalwindowMissed",
windowsOpen="totalWindowOpen",
noSolution="totalNoSolution",
utilizedWindows="totalUtilizedWindows",
NeededWidows="totalNeededWidows",
notNeeded="sufficientCap",
usedDisasterWindows= "totalUtilizedDisasterWindows"
),
# step_measures = measures(
#   sCoping="count orgs with [coping-change?]",
#   sAdapt="count orgs with [adaptation-change?]",
#   sNotFound="count orgs with [not-found?]",
#   SInsufBoost="count orgs with [insufBoost?]",
#   sWindowOpen="count orgs with [window-open?]",
#   sWindowMissed="count orgs with [window-missed?]",
#   sHappy="count orgs with [expectedImpact > riskPerceptionThreshold]"
# ),
# eval_criteria = criteria(
#   meanAdaptNum=mean(step$sAdapt),
#   stdAdaptNum=sd(step$sAdapt),
#   meanCopingNum=mean(sCoping),
#   sdCopingnum=sd(sCoping)
# ),
# agents_step = list(
#   orgs = agent_set(
#     vars = c("adaptation-change?", "coping-change?", "riskPerceptionThreshold", "expectedImpact", "solEfficacy","window-open?","window-missed?","insufBoost?","originalCapacity","solution-ready?","utilizedWindow?","sufficientCap", "extremeWeatherProb","originalEfficacy","disasterProb","declarationRate","region","used-disasterWindow?"),
#     agents = "orgs")
# ),
mapping = nl_default_mapping
)
# cbind(experiment$mapping)  #check parameter names mapping
# result1<- nl_run(experiment,parallel = T)
result1000_zeroWindow<- nl_run(experiment)
# save.image("C:/Z-Work/Dissertation/Data and analysis/Dissertation ABM paper/Model data and analysis_Windows/result1000_fixedInsufBoost.RData")
result1000_zeroWindow
experiment
source('~/.active-rstudio-document', echo=TRUE)
library(ggplot2)
library(nlexperiment)
library(dplyr)
library(purrr)
nl_netlogo_path("C:/Program Files/NetLogo 6.0.2/app")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
#http://bergant.github.io/nlexperiment/flocking_bestfit.html
# load(C:\Z-Work\ABM Reading Conf\nlexperiment\Introduction to nlexperiment.RData)
library(ggplot2)
library(nlexperiment)
library(dplyr)
library(purrr)
nl_netlogo_path("C:/Program Files/NetLogo 6.0.2/app")
source('~/.active-rstudio-document', echo=TRUE)
#http://bergant.github.io/nlexperiment/flocking_bestfit.html
# load(C:\Z-Work\ABM Reading Conf\nlexperiment\Introduction to nlexperiment.RData)
library(ggplot2)
library(nlexperiment)
library(dplyr)
library(purrr)
nl_netlogo_path("C:/Program Files/NetLogo 6.0.2/app")
experiment <- nl_experiment(
model_file = "models/Sample Models/Biology/Flocking.nlogo",
setup_commands = c("setup", "repeat 100 [go]"),
iterations = 5,
param_values = list(
world_size = 50,
population = 80,
vision = 6,
min_separation = seq(from = 0, to = 4, by = 0.25),
max_align_turn = seq(from = 0, to = 20, by = 1.25)
),
mapping = c(
min_separation = "minimum-separation",
max_align_turn = "max-align-turn"),
step_measures = measures(
converged = "1 -
(standard-deviation [dx] of turtles +
standard-deviation [dy] of turtles) / 2",
mean_crowding =
"mean [count flockmates + 1] of turtles"
),
eval_criteria = criteria(
c_converged = mean(step$converged),
c_mcrowding = mean(step$mean_crowding)
),
repetitions = 10,                        # repeat simulations 10 times
random_seed = 1:10,
eval_aggregate_fun = mean                # aggregate over repetitions
)
result <- nl_run(experiment, parallel = TRUE, print_progress = TRUE)
experiment <- nl_experiment(
model_file = "models/Sample Models/Biology/Flocking.nlogo",
setup_commands = c("setup", "repeat 100 [go]"),
iterations = 5,
param_values = list(
world_size = 50,
population = 80,
vision = 6,
min_separation = seq(from = 0, to = 4, by = 0.25),
max_align_turn = seq(from = 0, to = 20, by = 1.25)
),
mapping = c(
min_separation = "minimum-separation",
max_align_turn = "max-align-turn"),
step_measures = measures(
converged = "1 -
(standard-deviation [dx] of turtles +
standard-deviation [dy] of turtles) / 2",
mean_crowding =
"mean [count flockmates + 1] of turtles"
),
eval_criteria = criteria(
c_converged = mean(step$converged),
c_mcrowding = mean(step$mean_crowding)
),
repetitions = 10,                        # repeat simulations 10 times
random_seed = 1:10,
eval_aggregate_fun = mean                # aggregate over repetitions
)
result <- nl_run(experiment, parallel = TRUE, print_progress = TRUE)
?nl_experiment
dat <- nl_get_criteria_result(
result,
eval_value = sqrt((c_mcrowding - 8)^2 + 400*(c_converged - 1)^2)
)
dat
dim(dat)
ggplot(dat,aes(x=min_separation,y=max_align_turn))+
geom_tile()
ggplot(dat,aes(x=min_separation,y=max_align_turn))+
geom_tile()+
coord_fixed(4/20)
ggplot(dat,aes(x=min_separation,y=max_align_turn))+
geom_tile()+
coord_fixed(4/20)+
theme_minimal()
ggplot(dat,aes(x=min_separation,y=max_align_turn)ï¼Œ fill=eval_value)+
geom_tile()+
coord_fixed(4/20)+
theme_minimal()
ggplot(dat,
aes( x = min_separation, y = max_align_turn, fill = eval_value)) +
geom_tile() +
coord_fixed(4/20) +
theme_minimal() +
theme(legend.position="none")
ggplot(dat,aes(x=min_separation, y=max_align_turn,fill=eval_value))+
geom_title()+
coord_fixed(4/20)
ggplot(dat,aes(x=min_separation, y=max_align_turn,z=eval_value))+
stat_contour(bins=11)+
coord_fixed(4/20)+
theme_minimal()+
theme(legend.position = "none")
ggplot(dat,aes(x=min_separation, y=max_align_turn,eval_value))+
stat_contour(bins=11)+
coord_fixed(4/20)+
theme_minimal()+
theme(legend.position = "none")
ggplot(dat,aes(x=min_separation, y=max_align_turn,z=eval_value))+
stat_contour(bins=11,color=..level..)+
coord_fixed(4/20)+
theme_minimal()+
theme(legend.position = "none")
ggplot(dat,aes(x=min_separation, y=max_align_turn,z=eval_value))+
stat_contour(bins=11,aes(color=..level..))+
coord_fixed(4/20)+
theme_minimal()+
theme(legend.position = "none")
summary(dat$eval_value)
ggplot(dat,aes(x=min_separation, y=max_align_turn,z=eval_value))+
stat_contour(bins=20,aes(color=..level..))+
coord_fixed(4/20)+
theme_minimal()+
theme(legend.position = "none")
ggplot(dat,aes(x=min_separation, y=max_align_turn,z=eval_value))+
stat_contour(bins=20,aes(color=..level..))+
coord_fixed(4/20)+
theme_minimal()
ggplot(dat,
aes( x = min_separation, y = max_align_turn, fill = eval_value)) +
geom_tile() +
coord_fixed(4/20) +
theme_minimal()
ggplot(dat,aes(x=min_separation, y=max_align_turn,z=eval_value))+
stat_contour(bins=20,aes(color=..level..))+
coord_fixed(4/20)+
theme_minimal()
?kde2d
faculty
faculty[facutly$Thrust1_recode]
faculty[faculty$Thrust1_recode=="Aquatics", "fullName"]
faculty[faculty$Thrust1_recode=="Aquatics", c("fullName","Position1_recode")]
faculty[faculty$Thrust1_recode=="Aquatics", c("fullName","Position_recode")]
load("C:/Z-Work/Dissertation/Data and analysis/Model data and analysis_Windows/graphs for PMRC paper.RData")
load("C:/Z-Work/Dissertation/Data and analysis/Model data and analysis_Windows/graphs for PMRC paper.RData")
gold<-rgb(200,166,43,maxColorValue = 255)
darkgold<-rgb(95,72,18,maxColorValue = 255)
blue<-rgb(43,103,200,maxColorValue = 255)
darkblue<-rgb(18,41,95,maxColorValue = 255)
marron<-rgb(140,29,64,maxColorValue = 255)
org75<-agentStep %>% filter(agentID==75,run_id==1,param_set_id==1)
openWindows=org75 %>% filter(`window-open?`==TRUE) %>% select(step_id)
openWindows=openWindows[[1]]
ggplot(org75)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="grey50")+
geom_vline(xintercept=openWindows[1], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[2], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[3], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[4], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[5], color=marron,size=1.2)+
annotate("text",x=openWindows[2]-20,y=0.45, label="Under threshold",size=6, color=darkblue)+
annotate("text",x=openWindows[4]+140,y=0.57, label="Insufficient \ncapacity \nincrease",size=6,color=darkblue)+
theme_bw()+
xlab("Time")+
ylab("Perception/Expected impact")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
org75 %>% filter(step_id==openWindows[4]) #Insufficient boost
org75 %>% filter(step_id==openWindows[5]) #Insufficient boost
library(dplyr)
library(purrr)
library(ggplot2)
library(nlexperiment)
library(tidyr)
knitr::opts_knit$set(root.dir = "C:/Z-Work/Dissertation/Data and analysis/Dissertation ABM paper/Model experiment data")
gold<-rgb(200,166,43,maxColorValue = 255)
darkgold<-rgb(95,72,18,maxColorValue = 255)
blue<-rgb(43,103,200,maxColorValue = 255)
darkblue<-rgb(18,41,95,maxColorValue = 255)
marron<-rgb(140,29,64,maxColorValue = 255)
org75<-agentStep %>% filter(agentID==75,run_id==1,param_set_id==1)
openWindows=org75 %>% filter(`window-open?`==TRUE) %>% select(step_id)
openWindows=openWindows[[1]]
ggplot(org75)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="grey50")+
geom_vline(xintercept=openWindows[1], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[2], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[3], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[4], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[5], color=marron,size=1.2)+
annotate("text",x=openWindows[2]-20,y=0.45, label="Under threshold",size=6, color=darkblue)+
annotate("text",x=openWindows[4]+140,y=0.57, label="Insufficient \ncapacity \nincrease",size=6,color=darkblue)+
theme_bw()+
xlab("Time")+
ylab("Perception/Expected impact")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
org75 %>% filter(step_id==openWindows[4]) #Insufficient boost
org75 %>% filter(step_id==openWindows[5]) #Insufficient boost
rm(org)
ggplot(org75)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="grey50")+
geom_vline(xintercept=openWindows[1], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[2], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[3], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[4], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[5], color=marron,size=1.2)+
annotate("text",x=openWindows[2]-20,y=0.45, label="Under threshold",size=6, color=darkblue)+
annotate("text",x=openWindows[4]+140,y=0.57, label="Insufficient \ncapacity \nincrease",size=6,color=darkblue)+
theme_bw()+
xlab("Time")+
ylab("Risk Perception/Tolerance")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
# View(org195 %>% select(expectedImpact,originalEfficacy,`coping-change?`,`adaptation-change?`))
smallEWprob=agentStep1 %>% filter(extremeWeatherProb<=min(extremeWeatherProb)[1]+0.01)
unique(smallEWprob %>% filter(`window-open?`==TRUE) %>% select(agentID))
org112<-agentStep1 %>% filter(agentID==112)
open112=org112 %>% filter(`window-open?`==TRUE) %>% select(step_id)
open112=open112[[1]]
ggplot(org112)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="gray20")+
geom_vline(xintercept=open112[1], color=marron,size=1.2)+
geom_vline(xintercept=open112[2], color=marron,size=1.2)+
geom_vline(xintercept=open112[3], color=marron,size=1.2)+
geom_vline(xintercept=open112[4], color=marron,size=1.2)+
geom_vline(xintercept=open112[5], color=marron,size=1.2)+
theme_bw()+
xlab("Time")+
ylim(0,0.5)+
ylab("Perception/Expected impact")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
# View(org195 %>% select(expectedImpact,originalEfficacy,`coping-change?`,`adaptation-change?`))
smallEWprob=agentStep1 %>% filter(extremeWeatherProb<=min(extremeWeatherProb)[1]+0.01)
unique(smallEWprob %>% filter(`window-open?`==TRUE) %>% select(agentID))
org112<-agentStep1 %>% filter(agentID==112)
open112=org112 %>% filter(`window-open?`==TRUE) %>% select(step_id)
open112=open112[[1]]
ggplot(org112)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="gray20")+
geom_vline(xintercept=open112[1], color=marron,size=1.2)+
geom_vline(xintercept=open112[2], color=marron,size=1.2)+
geom_vline(xintercept=open112[3], color=marron,size=1.2)+
geom_vline(xintercept=open112[4], color=marron,size=1.2)+
geom_vline(xintercept=open112[5], color=marron,size=1.2)+
theme_bw()+
xlab("Time")+
ylim(0,0.5)+
ylab("Risk Perception/Tolerance")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
p1<-ggplot(org75)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="grey50")+
geom_vline(xintercept=openWindows[1], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[2], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[3], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[4], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[5], color=marron,size=1.2)+
annotate("text",x=openWindows[2]-20,y=0.45, label="Under threshold",size=6, color=darkblue)+
annotate("text",x=openWindows[4]+140,y=0.57, label="Insufficient \ncapacity \nincrease",size=6,color=darkblue)+
theme_bw()+
xlab("Time")+
ylab("Risk Perception/Tolerance")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
p2<-ggplot(org112)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="gray20")+
geom_vline(xintercept=open112[1], color=marron,size=1.2)+
geom_vline(xintercept=open112[2], color=marron,size=1.2)+
geom_vline(xintercept=open112[3], color=marron,size=1.2)+
geom_vline(xintercept=open112[4], color=marron,size=1.2)+
geom_vline(xintercept=open112[5], color=marron,size=1.2)+
theme_bw()+
xlab("Time")+
ylim(0,0.5)+
ylab("Risk Perception/Tolerance")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
par(mfrow=c(1,2))
p1
p2
plot(p1)
plot(p1,p2)
library(gridExtra)
grid.arrange(p1,p2,ncol=2)
?grid.arrange
grid.arrange(p1,p2,ncol=2,width=2)
grid.arrange(p1,p2,ncol=2,list(grobs = list(list(x = 0.5, y = 0.5, width = 1, height = 1))))
library(cowplot)
plot_grid(p1,p2,aligh="h",ncol=2)
grid.arrange(p1,p2,ncol=1)
gold<-rgb(200,166,43,maxColorValue = 255)
darkgold<-rgb(95,72,18,maxColorValue = 255)
blue<-rgb(43,103,200,maxColorValue = 255)
darkblue<-rgb(18,41,95,maxColorValue = 255)
marron<-rgb(140,29,64,maxColorValue = 255)
org75<-agentStep %>% filter(agentID==75,run_id==1,param_set_id==1)
openWindows=org75 %>% filter(`window-open?`==TRUE) %>% select(step_id)
openWindows=openWindows[[1]]
p1<-ggplot(org75)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="grey50")+
geom_vline(xintercept=openWindows[1], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[2], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[3], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[4], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[5], color=marron,size=1.2)+
# annotate("text",x=openWindows[2]-20,y=0.45, label="Under threshold",size=6, color=darkblue)+
# annotate("text",x=openWindows[4]+140,y=0.57, label="Insufficient \ncapacity \nincrease",size=6,color=darkblue)+
theme_bw()+
xlab("Time")+
ylab("Risk Perception/Tolerance")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
org75 %>% filter(step_id==openWindows[4]) #Insufficient boost
org75 %>% filter(step_id==openWindows[5]) #Insufficient boost
gold<-rgb(200,166,43,maxColorValue = 255)
darkgold<-rgb(95,72,18,maxColorValue = 255)
blue<-rgb(43,103,200,maxColorValue = 255)
darkblue<-rgb(18,41,95,maxColorValue = 255)
marron<-rgb(140,29,64,maxColorValue = 255)
org75<-agentStep %>% filter(agentID==75,run_id==1,param_set_id==1)
openWindows=org75 %>% filter(`window-open?`==TRUE) %>% select(step_id)
openWindows=openWindows[[1]]
p1<-ggplot(org75)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="grey50")+
geom_vline(xintercept=openWindows[1], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[2], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[3], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[4], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[5], color=marron,size=1.2)+
# annotate("text",x=openWindows[2]-20,y=0.45, label="Under threshold",size=6, color=darkblue)+
# annotate("text",x=openWindows[4]+140,y=0.57, label="Insufficient \ncapacity \nincrease",size=6,color=darkblue)+
theme_bw()+
xlab("Time")+
ylab("Risk Perception/Tolerance")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
org75 %>% filter(step_id==openWindows[4]) #Insufficient boost
org75 %>% filter(step_id==openWindows[5]) #Insufficient boost
gold<-rgb(200,166,43,maxColorValue = 255)
darkgold<-rgb(95,72,18,maxColorValue = 255)
blue<-rgb(43,103,200,maxColorValue = 255)
darkblue<-rgb(18,41,95,maxColorValue = 255)
marron<-rgb(140,29,64,maxColorValue = 255)
org75<-agentStep %>% filter(agentID==75,run_id==1,param_set_id==1)
openWindows=org75 %>% filter(`window-open?`==TRUE) %>% select(step_id)
openWindows=openWindows[[1]]
ggplot(org75)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="grey50")+
geom_vline(xintercept=openWindows[1], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[2], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[3], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[4], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[5], color=marron,size=1.2)+
# annotate("text",x=openWindows[2]-20,y=0.45, label="Under threshold",size=6, color=darkblue)+
# annotate("text",x=openWindows[4]+140,y=0.57, label="Insufficient \ncapacity \nincrease",size=6,color=darkblue)+
theme_bw()+
xlab("Time")+
ylab("Risk Perception/Tolerance")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
org75 %>% filter(step_id==openWindows[4]) #Insufficient boost
org75 %>% filter(step_id==openWindows[5]) #Insufficient boost
ggplot(org75)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="grey50")+
geom_vline(xintercept=openWindows[1], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[2], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[3], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[4], color=marron,size=1.2)+
geom_vline(xintercept=openWindows[5], color=marron,size=1.2)+
# annotate("text",x=openWindows[2]-20,y=0.45, label="Under threshold",size=6, color=darkblue)+
# annotate("text",x=openWindows[4]+140,y=0.57, label="Insufficient \ncapacity \nincrease",size=6,color=darkblue)+
theme_bw()+
xlab("Time")+
ylab("Risk Perception/Tolerance")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
ggplot(org112)+
geom_line(aes(x=step_id,y=riskPerceptionThreshold),color=gold,size=1.5)+
geom_line(aes(x=step_id,y=expectedImpact),color="gray20")+
geom_vline(xintercept=open112[1], color=marron,size=1.2)+
geom_vline(xintercept=open112[2], color=marron,size=1.2)+
geom_vline(xintercept=open112[3], color=marron,size=1.2)+
geom_vline(xintercept=open112[4], color=marron,size=1.2)+
geom_vline(xintercept=open112[5], color=marron,size=1.2)+
theme_bw()+
xlab("Time")+
ylim(0,0.5)+
ylab("Risk Perception/Tolerance")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),axis.text = element_text(size=12),axis.title = element_text(size=16))
